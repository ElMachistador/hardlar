/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface Marketplace1155Interface extends ethers.utils.Interface {
  functions: {
    "acceptBatchOffer(address,uint256[],bytes)": FunctionFragment;
    "acceptOffer(address,uint256,bytes)": FunctionFragment;
    "addGroupOffer(address,uint256[],uint256[],uint256[])": FunctionFragment;
    "addOffer(address,uint256,uint256,uint256)": FunctionFragment;
    "cancelBatchOffer(address,uint256[])": FunctionFragment;
    "cancelOffer(address,uint256)": FunctionFragment;
    "toSell(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptBatchOffer",
    values: [string, BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOffer",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addGroupOffer",
    values: [string, BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addOffer",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBatchOffer",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toSell",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptBatchOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addGroupOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelBatchOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toSell", data: BytesLike): Result;

  events: {
    "Accepted(address,uint256,address)": EventFragment;
    "Cancelled(address,uint256,address)": EventFragment;
    "OnSale(address,uint256,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Accepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnSale"): EventFragment;
}

export type AcceptedEvent = TypedEvent<
  [string, BigNumber, string] & {
    tokenContract: string;
    tokenId: BigNumber;
    newOwner: string;
  }
>;

export type CancelledEvent = TypedEvent<
  [string, BigNumber, string] & {
    tokenContract: string;
    tokenId: BigNumber;
    owner: string;
  }
>;

export type OnSaleEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber] & {
    tokenContract: string;
    tokenId: BigNumber;
    owner: string;
    amount: BigNumber;
    price: BigNumber;
  }
>;

export class Marketplace1155 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: Marketplace1155Interface;

  functions: {
    acceptBatchOffer(
      _tokenContract: string,
      _tokenIds: BigNumberish[],
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptOffer(
      _tokenContract: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addGroupOffer(
      _tokenContract: string,
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addOffer(
      _tokenContract: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelBatchOffer(
      _tokenContract: string,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelOffer(
      _tokenContract: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toSell(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        owner: string;
        amount: BigNumber;
        price: BigNumber;
      }
    >;
  };

  acceptBatchOffer(
    _tokenContract: string,
    _tokenIds: BigNumberish[],
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptOffer(
    _tokenContract: string,
    _tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addGroupOffer(
    _tokenContract: string,
    _tokenIds: BigNumberish[],
    _amounts: BigNumberish[],
    _prices: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addOffer(
    _tokenContract: string,
    _tokenId: BigNumberish,
    _amount: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelBatchOffer(
    _tokenContract: string,
    _tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelOffer(
    _tokenContract: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toSell(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      owner: string;
      amount: BigNumber;
      price: BigNumber;
    }
  >;

  callStatic: {
    acceptBatchOffer(
      _tokenContract: string,
      _tokenIds: BigNumberish[],
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptOffer(
      _tokenContract: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addGroupOffer(
      _tokenContract: string,
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    addOffer(
      _tokenContract: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelBatchOffer(
      _tokenContract: string,
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOffer(
      _tokenContract: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    toSell(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        owner: string;
        amount: BigNumber;
        price: BigNumber;
      }
    >;
  };

  filters: {
    "Accepted(address,uint256,address)"(
      tokenContract?: string | null,
      tokenId?: BigNumberish | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { tokenContract: string; tokenId: BigNumber; newOwner: string }
    >;

    Accepted(
      tokenContract?: string | null,
      tokenId?: BigNumberish | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { tokenContract: string; tokenId: BigNumber; newOwner: string }
    >;

    "Cancelled(address,uint256,address)"(
      tokenContract?: string | null,
      tokenId?: BigNumberish | null,
      owner?: string | null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { tokenContract: string; tokenId: BigNumber; owner: string }
    >;

    Cancelled(
      tokenContract?: string | null,
      tokenId?: BigNumberish | null,
      owner?: string | null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { tokenContract: string; tokenId: BigNumber; owner: string }
    >;

    "OnSale(address,uint256,address,uint256,uint256)"(
      tokenContract?: string | null,
      tokenId?: BigNumberish | null,
      owner?: string | null,
      amount?: null,
      price?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, BigNumber],
      {
        tokenContract: string;
        tokenId: BigNumber;
        owner: string;
        amount: BigNumber;
        price: BigNumber;
      }
    >;

    OnSale(
      tokenContract?: string | null,
      tokenId?: BigNumberish | null,
      owner?: string | null,
      amount?: null,
      price?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, BigNumber],
      {
        tokenContract: string;
        tokenId: BigNumber;
        owner: string;
        amount: BigNumber;
        price: BigNumber;
      }
    >;
  };

  estimateGas: {
    acceptBatchOffer(
      _tokenContract: string,
      _tokenIds: BigNumberish[],
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptOffer(
      _tokenContract: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addGroupOffer(
      _tokenContract: string,
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addOffer(
      _tokenContract: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelBatchOffer(
      _tokenContract: string,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelOffer(
      _tokenContract: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toSell(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptBatchOffer(
      _tokenContract: string,
      _tokenIds: BigNumberish[],
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptOffer(
      _tokenContract: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addGroupOffer(
      _tokenContract: string,
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addOffer(
      _tokenContract: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelBatchOffer(
      _tokenContract: string,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelOffer(
      _tokenContract: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toSell(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
